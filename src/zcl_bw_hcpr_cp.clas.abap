CLASS zcl_bw_hcpr_cp DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES: BEGIN OF ty_hcpr,
             hcprnm TYPE c LENGTH 30,
             vers   TYPE c LENGTH 10,
             xml_ui TYPE rsrawstring.
    TYPES: END OF ty_hcpr.

    TYPES: t_ty_hcpr TYPE STANDARD TABLE OF ty_hcpr WITH DEFAULT KEY.

    METHODS constructor.

    METHODS create_global_ddic.

    METHODS create_backup
      IMPORTING iv_hcprnm TYPE char30.

    METHODS restore_backup
      IMPORTING iv_hcprnm TYPE char30
                iv_vers   TYPE char10.

    METHODS show_mapping
      IMPORTING iv_hcprnm TYPE char30.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_bw_hcpr_cp IMPLEMENTATION.

  METHOD create_global_ddic.

    TYPES: BEGIN OF t_tables,
             tablename TYPE string.
             INCLUDE   TYPE dd03p.
    TYPES: END OF t_tables.

    TYPES: t_ty_tables TYPE STANDARD TABLE OF t_tables WITH EMPTY KEY.

    DATA: lv_objname  TYPE ddobjname,
          lv_rc       LIKE sy-subrc,
          lv_obj_name TYPE tadir-obj_name,
          ls_dd02v    TYPE dd02v,
          ls_dd09l    TYPE dd09l,
          lv_exist    TYPE abap_bool,
          lt_dd03p    TYPE STANDARD TABLE OF dd03p WITH EMPTY KEY.

    FIELD-SYMBOLS: <ls_dd03p> LIKE LINE OF lt_dd03p.

    DATA(lt_tables) = VALUE t_ty_tables(
    ( tablename = 'ZBW_HCPR_CP' fieldname = 'HCPRNM' position ='0001'
    keyflag = abap_true datatype = 'CHAR' leng = '000030' )
    ( tablename = 'ZBW_HCPR_CP' fieldname = 'VERS' position ='0002'
    keyflag = abap_true datatype = 'CHAR' leng = '000010' )
    ( tablename = 'ZBW_HCPR_CP' fieldname = 'XML_UI' position ='0003'
     datatype = 'RSTR'  )
 ).

    ls_dd09l-tabname  = 'ZBW_HCPR_CP'.
    ls_dd09l-as4local = 'A'.
    ls_dd09l-tabkat   = '1'.
    ls_dd09l-tabart   = 'APPL1'.
    ls_dd09l-bufallow = 'N'.

    ls_dd02v-tabname    = 'ZBW_HCPR_CP'.
    ls_dd02v-ddlanguage = 'E'.
    ls_dd02v-tabclass   = 'TRANSP'.
    ls_dd02v-ddtext     = 'Generated by ZBW_HCPR_CP'.
    ls_dd02v-contflag   = 'L'.
    ls_dd02v-exclass    = '1'.

    SELECT SINGLE @abap_true ##SUBRC_OK
    FROM dd02l
    INTO @lv_exist
    WHERE   tabname = 'ZBW_HCPR_CP'
    AND     as4local  = 'A'.

    CHECK lv_exist = abap_false.

    lv_objname = 'ZBW_HCPR_CP'.

    lt_dd03p = CORRESPONDING #( lt_tables ).

    IF lv_exist = abap_false.

      CALL FUNCTION 'DDIF_TABL_PUT'
        EXPORTING
          name              = lv_objname
          dd02v_wa          = ls_dd02v
          dd09l_wa          = ls_dd09l
        TABLES
          dd03p_tab         = lt_dd03p
        EXCEPTIONS
          tabl_not_found    = 1
          name_inconsistent = 2
          tabl_inconsistent = 3
          put_failure       = 4
          put_refused       = 5
          OTHERS            = 6.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      CALL FUNCTION 'DDIF_TABL_ACTIVATE'
        EXPORTING
          name        = lv_objname
          auth_chk    = abap_false
        IMPORTING
          rc          = lv_rc
        EXCEPTIONS
          not_found   = 1
          put_failure = 2
          OTHERS      = 3.
      IF sy-subrc <> 0 OR lv_rc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      CLEAR lt_dd03p.

    ENDIF.

  ENDMETHOD.

  METHOD create_backup.

    SELECT hcprnm, xml_ui
    FROM rsohcpr
    INTO TABLE @DATA(lt_rsohcpr)
    WHERE hcprnm = @iv_hcprnm.

    DATA(lt_hcprtab) = CORRESPONDING t_ty_hcpr( lt_rsohcpr ).

    INSERT ('ZBW_HCPR_CP') FROM TABLE lt_hcprtab.
    IF sy-subrc <> 0.
      MESSAGE 'Error during backup creation, check version' TYPE 'E'.
    ENDIF.

  ENDMETHOD.

  METHOD restore_backup.

    DATA: ls_hcprtab TYPE ty_hcpr.

    SELECT SINGLE * FROM
    ('ZBW_HCPR_CP')
    INTO @ls_hcprtab
    WHERE hcprnm = @iv_hcprnm
    AND vers = @iv_vers.

    IF sy-subrc <> 0.
      MESSAGE 'Error during backup restore, check version' TYPE 'E'.
    ENDIF.

    UPDATE rsohcpr
    SET xml_ui = ls_hcprtab-xml_ui
    WHERE hcprnm = ls_hcprtab-hcprnm.

    IF sy-subrc <> 0.
      MESSAGE 'Error during backup restore, check version' TYPE 'E'.
    ENDIF.

  ENDMETHOD.

  METHOD show_mapping.

    TYPES: BEGIN OF ty_output,
             infoprovider TYPE rsdodsobject,
             source       TYPE rsdiobjnm,
             target       TYPE rsohcprcolnm,
           END OF ty_output.

    TYPES: BEGIN OF ty_output2,
             iobj TYPE rsdiobjnm,
           END OF ty_output2.

    TYPES: BEGIN OF ty_output3,
             object TYPE rsdodsobject,
             source TYPE rsdiobjnm,
             target TYPE rsohcprcolnm,
           END OF ty_output3.

    DATA: l_hobj_xml_def      TYPE xstring,
          lt_xml_info         TYPE TABLE OF smum_xmltb INITIAL SIZE 0,
          lt_return           TYPE STANDARD TABLE OF bapiret2,
          lt_output           TYPE STANDARD TABLE OF ty_output,
          lt_output2          TYPE STANDARD TABLE OF ty_output2,
          lt_output3          TYPE STANDARD TABLE OF ty_output3,
          l_cvalue            TYPE char255,
          l_offset            TYPE i,
          l_output            TYPE ty_output,
          l_output2           TYPE ty_output2,
          l_output3           TYPE ty_output3,
          lv_flg_hcpr         TYPE flag VALUE 'X',
          lv_flg_adso         TYPE flag VALUE '',
          lv_flg_haap         TYPE flag VALUE '',
          lv_idx_collect_haap TYPE sy-tabix.

    DATA: go_alv     TYPE REF TO cl_salv_table,
          go_columns TYPE REF TO cl_salv_columns,
          go_funcs   TYPE REF TO cl_salv_functions,
          go_ex      TYPE REF TO cx_root.

    FIELD-SYMBOLS: <fs_xml_info> TYPE smum_xmltb,
                   <fs_any_tab>  TYPE any.

* Select XML definition of CompositeProvider
    SELECT SINGLE xml_ui
       FROM rsohcpr
       INTO l_hobj_xml_def
       WHERE hcprnm = iv_hcprnm
       AND objvers = 'A'.

    IF sy-subrc <> 0.
      CLEAR lv_flg_hcpr.
* Check if input is an Advanced DSO
      SELECT SINGLE xml_ui
      FROM rsoadso
      INTO l_hobj_xml_def
      WHERE adsonm = iv_hcprnm
      AND objvers = 'A'.
      IF sy-subrc <> 0.
        CLEAR: lv_flg_hcpr, lv_flg_adso.
        SELECT SINGLE xml
        FROM rsdhamap
        INTO l_hobj_xml_def
        WHERE haapnm = iv_hcprnm
        AND objvers = 'A'.

        IF sy-subrc <> 0.
          MESSAGE 'Invalid or Inactive CompositeProvider/ADSO /HAAP or CompositeProvider/ADSO/HAAP not of type HCPR/ADSO/HAAP' TYPE 'I'.
          EXIT.
        ELSE.
          lv_flg_haap = 'X'.
        ENDIF.
      ELSE. "lv_flg_adso
        lv_flg_adso = 'X'.
      ENDIF.
    ENDIF.

    IF lv_flg_hcpr EQ 'X'.
      BREAK bb5827.
      ASSIGN lt_output TO <fs_any_tab> .
* Parse XML string to XML table

      CALL FUNCTION 'SMUM_XML_PARSE'
        EXPORTING
          xml_input = l_hobj_xml_def
        TABLES
          xml_table = lt_xml_info
          return    = lt_return.
* Internal table with mapping

      LOOP AT lt_xml_info ASSIGNING <fs_xml_info>.

        IF <fs_xml_info>-cname = 'entity'.

          l_cvalue = <fs_xml_info>-cvalue.
          SEARCH l_cvalue FOR 'composite'.
          l_offset = sy-fdpos.
          l_offset = l_offset - 1.
          TRY.
              l_output-infoprovider = <fs_xml_info>-cvalue(l_offset). "CompositeProvider
            CATCH cx_sy_range_out_of_bounds.
              l_output-infoprovider = <fs_xml_info>-cvalue.
          ENDTRY.

        ELSEIF
         <fs_xml_info>-cname = 'targetName'.
          l_output-target = <fs_xml_info>-cvalue.
        ELSEIF
          <fs_xml_info>-cname = 'sourceName'.
          l_output-source = <fs_xml_info>-cvalue.
          APPEND l_output TO lt_output.
        ENDIF.
      ENDLOOP.

    ELSEIF lv_flg_adso = 'X'.

      ASSIGN lt_output2 TO <fs_any_tab> .
* Parse XML string to XML table
      CALL FUNCTION 'SMUM_XML_PARSE'
        EXPORTING
          xml_input = l_hobj_xml_def
        TABLES
          xml_table = lt_xml_info
          return    = lt_return.
* Internal table with mapping

      LOOP AT lt_xml_info ASSIGNING <fs_xml_info>.
        IF <fs_xml_info>-cname = 'infoObjectName'.
          l_output2-iobj = <fs_xml_info>-cvalue.
          APPEND l_output2 TO lt_output2.
        ENDIF.
      ENDLOOP.
    ELSEIF lv_flg_haap = 'X'.

      ASSIGN lt_output3 TO <fs_any_tab> .
* Parse XML string to XML table
      CALL FUNCTION 'SMUM_XML_PARSE'
        EXPORTING
          xml_input = l_hobj_xml_def
        TABLES
          xml_table = lt_xml_info
          return    = lt_return.
* Pick-Up index for
      CLEAR:lv_idx_collect_haap.
      READ TABLE lt_xml_info ASSIGNING <fs_xml_info> WITH KEY cvalue = '0BW_TGT_INFOSOURCE'.

      IF sy-subrc = 0.
        lv_idx_collect_haap = sy-tabix.
      ENDIF.
* Internal table with mapping
      l_output3-object = '0BW_TGT_INFOSOURCE'.
      LOOP AT lt_xml_info ASSIGNING <fs_xml_info>.
        IF sy-tabix > lv_idx_collect_haap.
          IF <fs_xml_info>-cname = 'sourceFieldName'.
            l_output3-source = <fs_xml_info>-cvalue.
          ELSEIF <fs_xml_info>-cname = 'targetFieldName'.
            l_output3-target = <fs_xml_info>-cvalue.
            APPEND l_output3 TO lt_output3.
          ENDIF.

        ENDIF.
      ENDLOOP.
      DELETE ADJACENT DUPLICATES FROM lt_output3.
    ENDIF.

* Output to ALV
    TRY.
        cl_salv_table=>factory(
        IMPORTING
        r_salv_table = go_alv
        CHANGING
        t_table = <fs_any_tab> ).
        " set column optimized
        go_columns = go_alv->get_columns( ).
        go_columns->set_optimize( ).
        " set functions
        go_funcs = go_alv->get_functions( ).
        go_funcs->set_all( ).
        go_alv->display( ).
      CATCH cx_salv_msg INTO go_ex.
        MESSAGE go_ex TYPE 'E'.
    ENDTRY.

  ENDMETHOD.

  METHOD constructor.

    create_global_ddic( ).

  ENDMETHOD.

ENDCLASS.
